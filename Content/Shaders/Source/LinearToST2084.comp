#version 450

layout (local_size_x = 8, local_size_y = 8) in;
layout (set = 0, binding = 0, rgba16f) uniform readonly image2D inImage;
layout (set = 1, binding = 0, rgb10_a2) uniform writeonly image2D outImage;

const float g_MaxNitsFor2084 = 10000.0f;

// Color rotation matrix to rotate Rec.709 color primaries into Rec.2020
const mat3x3 from709to2020 =
{
    { 0.6274040f, 0.3292820f, 0.0433136f },
    { 0.0690970f, 0.9195400f, 0.0113612f },
    { 0.0163916f, 0.0880132f, 0.8955950f }
};

vec3 LinearToST2084(vec3 normalizedLinearValue)
{
    return pow(
		(0.8359375f + 18.8515625f * pow(
			abs(normalizedLinearValue),
			vec3(0.1593017578f)
		)) / (1.0f + 18.6875f * pow(
			abs(normalizedLinearValue),
			vec3(0.1593017578f)
		)),
		vec3(78.84375f)
	);
}

vec3 NormalizeHDRSceneValue(vec3 hdrSceneValue, float paperWhiteNits)
{
    vec3 normalizedLinearValue = hdrSceneValue * paperWhiteNits / g_MaxNitsFor2084;
    return normalizedLinearValue;       // Don't clamp between [0..1], so we can still perform operations on scene values higher than 10,000 nits
}

float CalcHDRSceneValue(float nits, float paperWhiteNits)
{
    return nits / paperWhiteNits;
}

vec4 ConvertToHDR10(vec4 hdrSceneValue, float paperWhiteNits)
{
    vec3 rec2020 = hdrSceneValue.rgb * from709to2020;                             // Rotate Rec.709 color primaries into Rec.2020 color primaries
    vec3 normalizedLinearValue = NormalizeHDRSceneValue(rec2020, paperWhiteNits);     // Normalize using paper white nits to prepare for ST.2084
    vec3 HDR10 = LinearToST2084(normalizedLinearValue);                               // Apply ST.2084 curve

    return vec4(HDR10.rgb, hdrSceneValue.a);
}

void main()
{
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec4 inPixel = imageLoad(inImage, coord);

	imageStore(outImage, coord, ConvertToHDR10(inPixel, 200.0));
}
