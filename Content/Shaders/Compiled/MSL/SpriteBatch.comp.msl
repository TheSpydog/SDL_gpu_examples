#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_UBO
{
    float time;
};

struct SpriteComputeData
{
    packed_float3 position;
    float rotation;
    float2 scale;
    float4 color;
};

struct type_StructuredBuffer_SpriteComputeData
{
    SpriteComputeData _m0[1];
};

struct SpriteVertex
{
    float4 position;
    float2 texcoord;
    float4 color;
};

struct type_RWStructuredBuffer_SpriteVertex
{
    SpriteVertex _m0[1];
};

kernel void main0(constant type_UBO& UBO [[buffer(0)]], const device type_StructuredBuffer_SpriteComputeData& ComputeBuffer [[buffer(1)]], device type_RWStructuredBuffer_SpriteVertex& VertexBuffer [[buffer(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    SpriteComputeData _56 = ComputeBuffer._m0[gl_GlobalInvocationID.x];
    float _66 = cos(_56.rotation);
    float _67 = sin(_56.rotation);
    float4x4 _78 = (float4x4(float4(1.0, 0.0, 0.0, 0.0), float4(0.0, 1.0, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(_56.position[0], _56.position[1], _56.position[2], 1.0)) * float4x4(float4(_66, _67, 0.0, 0.0), float4(-_67, _66, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(0.0, 0.0, 0.0, 1.0))) * float4x4(float4(_56.scale.x, 0.0, 0.0, 0.0), float4(0.0, _56.scale.y, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(0.0, 0.0, 0.0, 1.0));
    uint _80 = gl_GlobalInvocationID.x * 4u;
    VertexBuffer._m0[_80].position = _78 * float4(0.0, 0.0, 0.0, 1.0);
    uint _83 = _80 + 1u;
    VertexBuffer._m0[_83].position = _78 * float4(1.0, 0.0, 0.0, 1.0);
    uint _86 = _80 + 2u;
    VertexBuffer._m0[_86].position = _78 * float4(0.0, 1.0, 0.0, 1.0);
    uint _89 = _80 + 3u;
    VertexBuffer._m0[_89].position = _78 * float4(1.0, 1.0, 0.0, 1.0);
    VertexBuffer._m0[_80].texcoord = float2(0.0);
    VertexBuffer._m0[_83].texcoord = float2(1.0, 0.0);
    VertexBuffer._m0[_86].texcoord = float2(0.0, 1.0);
    VertexBuffer._m0[_89].texcoord = float2(1.0);
    float4 _98 = _56.color * sin(UBO.time);
    VertexBuffer._m0[_80].color = _98;
    VertexBuffer._m0[_83].color = _98;
    VertexBuffer._m0[_86].color = _98;
    VertexBuffer._m0[_89].color = _98;
}

